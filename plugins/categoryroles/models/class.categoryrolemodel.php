<?php
/**
 * @copyright 2009-2016 Vanilla Forums Inc.
 */

/**
 * Provide data handling for the CategoryRole table.
 */
class CategoryRoleModel extends Gdn_Model {

    /**
     * CategoryRoleModel constructor.
     */
    public function __construct() {
        parent::__construct('CategoryRole');
    }

    /**
     * Format a CategoryRoles field to be an array of category IDs, grouped by role ID.
     *
     * @param array $categoryRoles
     * @return array
     */
    public function formatFormField($categoryRoles) {
        $result = [];

        /**
         * The $categoryRoles data should be either a multi-dimensional array or an array of objects.  Either way the
         * elements in the array should have two properties/keys:
         *
         *   1. RoleID - ID of a role.  If SimpleAPI is enabled, this can be generated by having a valid Role.Name key.
         *   2. CategoryID - ID of a category. This can be a single integer or an array of integers.  If SimpleAPI is
         *     enabled, this can be generated by having a valid Category.UrlCode key.
         */

        if (!is_array($categoryRoles)) {
            return $result;
        }

        // Is the SimpleAPI plug-in available for translating fields?
        $canTranslate = class_exists('SimpleAPIPlugin');

        // Iterate through what we've got.
        foreach ($categoryRoles as &$mapping) {
            // If we can translate, we'll be able to convert fields like Role.Name to a proper RoleID value.
            if ($canTranslate) {
                SimpleAPIPlugin::translatePost($mapping);
            }

            $roleID = val('RoleID', $mapping);
            $categoryID = val('CategoryID', $mapping);

            if (empty($roleID) || empty($categoryID)) {
                continue;
            }

            // The incoming value may or may not be an array.  Let's just make sure it always is.
            if (!is_array($categoryID)) {
                $categoryID = [$categoryID];
            }

            // Make sure we have an array under the role ID to hold our categories.
            if (!array_key_exists($roleID, $result)) {
                $result[$roleID] = [];
            }

            // Iterate through the role's categories...
            foreach ($categoryID as $currentCategoryID) {
                // Don't bother if we already have this role:category mapping.
                if (in_array($categoryID, $result[$roleID])) {
                    continue;
                }

                // Add it on.
                $result[$roleID][] = $currentCategoryID;
            }
        }

        return $result;
    }

    /**
     * Get category role entries for a user, grouped by role ID.
     *
     * @param int $userID
     * @return array
     */
    public function getByUser($userID) {
        $result = [];
        $query = $this->SQL->from($this->Name)->where('UserID', $userID);
        $rows = $query->get()->resultArray();

        if (empty($rows)) {
            // No existing mappings? No point in continuing.
            return $result;
        }

        // Iterate through the existing rows...
        foreach ($rows as $currentRow) {
            $roleID = $currentRow['RoleID'];
            $categoryID = $currentRow['CategoryID'];

            // Make sure we have an array under the role's ID, so we can store the categories.
            if (!array_key_exists($roleID, $result)) {
                $result[$roleID] = [];
            }

            // The database should be keeping any duplicates from occurring, but just in case...
            if (in_array($categoryID, $result[$roleID])) {
                continue;
            }

            // Add it on.
            $result[$roleID][] = $categoryID;
        }

        return $result;
    }

    /**
     * Synchronize role:category mappings with incoming data.
     *
     * @param int $userID
     * @param array $incoming
     */
    public function syncRecords($userID, $incoming) {
        // How many database operations have been performed?
        $transactions = 0;

        // Remove any existing records that are no longer relevant.
        $existing = $this->getByUser($userID);
        foreach ($existing as $roleID => $categories) {
            if (!array_key_exists($roleID, $incoming)) {
                // New data has no records for this role, so get rid of them all.
                $this->delete([
                    'UserID' => $userID,
                    'RoleID' => $roleID
                ]);
                $transactions++;
                continue;
            }

            // Wipe out any per-category role entries that are no longer valid.
            foreach ($categories as $categoryID) {
                if (!in_array($categoryID, $incoming[$roleID])) {
                    $this->delete([
                        'UserID' => $userID,
                        'RoleID' => $roleID,
                        'CategoryID' => $categoryID
                    ]);
                    $transactions++;
                }
            }
        }
        unset($currentRow, $roleID, $categoryID);

        // Add the newbies.
        foreach ($incoming as $roleID => $categories) {
            // Insert any per-category role entries that don't already exist.
            foreach ($categories as $categoryID) {
                if (!array_key_exists($roleID, $existing) || !in_array($categoryID, $existing[$roleID])) {
                    $this->insert([
                        'UserID' => $userID,
                        'RoleID' => $roleID,
                        'CategoryID' => $categoryID
                    ]);
                    $transactions++;
                }
            }
        }

        // If we had to perform any updates, make sure we purge any cached permissions data.
        if ($transactions > 0) {
            Gdn::userModel()->clearCache($userID, ['permissions']);
        }
    }
}
